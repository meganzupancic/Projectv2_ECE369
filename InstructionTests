Instruction Testing:

addi:
  1. addi $t1, $zero, 6  ->  $t1 = $zero + 6
                          rs = $zero = reg #0,  ReadData1 = 0   final value in reg = 0
                          rt = $t1 = reg #9,    ReadData2 = 0   final value in reg = 6   (destination for I-type)
                          imm = 6
                          PC = 0   (address of instruction)

  2. add $t2, $t1, $t1   ->  $t2 = $t1 + $t1
                          rs = $t1 = reg #9,    ReadData1 = 6               final value in reg = 6
                          rt = $t1 = reg #9,    ReadData2 = 6               final value in reg  = 6
                          rd = $t2 = reg #10,   initial value in reg = 0    final value in reg = 12  (destination for R-type)
                          PC = 24  (address of instruction)

  3. sw $t2, 4($t1)    ->   value in $t2 gets stored into memory[$t1 value + imm]       sw: memory[rs value + imm] = rt value
                         rs = $t1 = reg #9,    ReadData1 = 6
                         rt = $t2 = reg #10,   ReadData2 = 12
                         imm = 4
                         memory[6 + 4] = memory[10] 
                         WANT memory[10] = 12
                         PC = 48  (address of instruction)

4. lw $t3, 4($t1)      ->  value in memory[$t1 value + imm] stored into reg $t3        lw: rt = memory[rs value + imm]
                        rs = $t1 = reg #9,    ReadData1 = 6
                        rt = $t3 = reg #11,   ReadData2 = X
                        imm = 4
                        memory[6 + 4] = memory[10]
                        WANT $t3 (reg #11) = 12
                        PC = 72  (address of instruction)

5. sub $t4, $t3, $t1   -> $t4 = 12 - 6 
                          rs = $t3 = reg #11,  ReadData1 = 12
                          rt = $t1 = reg #9,   ReadData2 = 6
                          rd = $t4 = reg #12
                          WANT $t4 (reg #12) = 6
                          PC = 96  (address of instruction)

6. mul $t0, $t1, $t4   -> $t0 = 6 * 6
                          rs = $t1 = reg #9,   ReadData1 = 6
                          rt = $t4 = reg #12,  ReadData2 =6
                          rd = $t0 = reg #8
                          WANT $t0 (reg #8) = 36
                          PC = 96  (address of instruction)

7. and $t3, $t1, $t2   -> $t3 = 6 & 12 = 00110 & 01100 = 4
                          rs = $t1 = reg #9,     ReadData1 = 6
                          rt = $t2 = reg #10,    ReadData2 = 12
                          rd = $t3 = reg #11,    current value = 12
                          WANT $t3 (reg #11) = 4
                          PC = 144  (address of instruction)

8. andi $t4, $t2, 13   -> $t4 = 12 & 13  =  01100 & 01101  =  01100  =  12
                          rs = $t2 (reg #10),    ReadData1 = 12
                          rt = $t4 (reg #12),    ReadData2 = 6    (destination for I-type)
                          imm = 13
                          WANT $t4 (reg #12) = 12
                          PC = 168  (address of instruction)

9. or $t5, $t0, $t1  ->  $t5 = 36 or 6  =  100100 or 000110  =  100110  =  38
                          rs = $t0 (reg #8),     ReadData1 = 36
                          rt = $t1 (reg #9),     ReadData2 = 6
                          rd = $t5 (reg #13),    current value = x
                          WANT $t5 (reg #13) = 38
                          PC = 192

10. ori $t6, $t5, 15  -> $t6 = 38 or 15  =  100110 or 001111  =  101111  =  47
                          rs = $t5 (reg #13),     ReadData1 = 38
                          rt = $t6 (reg #14),     ReadData2 = x        (destination for I-type)
                          imm = 15
                          WANT $t6 (reg #14) = 47
                          PC = 216

11. nor $t7, $t5, $t2  -> $t7 = 38 nor 12  =  100110 nor 001100  =  010001  17
                          rs = $t5 (reg #13),    ReadData1 = 38
                          rt = $t2 (reg #10),    ReadData2 = 12
                          rd = $t7 (reg #15),    current value = x
                          WANT $t7 (reg #15) = 17
                          PC = 240

12. xor $t0, $t0, $t1  -> $t0 = 36 xor 6  =  100100 xor 000110  =  100010  = 34
                          rs = $t0 (reg #8),    ReadData1 = 36
                          rt = $t1 (reg #9),    ReadData2 = 6
                          rd = $t0 (reg #8),    current value = 36
                          WANT $t0 (reg #8) = 34
                          PC = 264

13. xori $t1, $t2, 7  ->  $t1 = 12 xor 7  =  001100 xor 000111  =  001011  =  11
                          rs = $t2 (reg #10),    ReadData1 = 12
                          rt = $t1 (reg #9),     ReadData1 = 6        (destination for I-type)
                          imm = 7
                          WANT $t1 (reg #9) = 11
                          PC = 288

14. jump loop  ->  loop is at xor instruction, which is PC instruction address 264
                   opcode = 000010
                   address = 264
                   WANT PC_pin = 264

14. beq $t0, $t1, -6  -> rs = $t0 (reg #8) = 34
                         rt = $t1 (reg #9) = 11
                         imm = -7
                         WANT no branch

15. beq $t2, $t4, -12  -> rs = $t2 (reg #10) = 12
                          rt = $t4 (reg #10) = 12
                          imm = -14
                          WANT to jump to 14 lines before (the xori instruction), instruction address 288













